getwd()
source('myPalette.R')
source('./NanoMean.R')
source('./InnerFilter.R')
source('./PARAFAC.cube.design.R')
source('./plot.eem.go.richard.R')
source('./plot.integrate.RAMAN.R')
source('./read.EEM.Richard.R')
source('./subtract.blank.plot.EEMs.Richard.R')
source('./plot.integrate.RAMAN.go.R')
source('./PlotAllEEM.R')
source('./ExportEEM.R')
require(stringr)
require(stringdist)
source('./myPalette.R')
source('./NanoMean.R')
source('./InnerFilter.R')
source('./PARAFAC.cube.design.R')
source('./plot.eem.go.richard.R')
source('./plot.integrate.RAMAN.R')
source('./read.EEM.Richard.R')
source('./subtract.blank.plot.EEMs.Richard.R')
source('./plot.integrate.RAMAN.go.R')
source('./PlotAllEEM.R')
source('./ExportEEM.R')
cube=PARAFAC.cube.design()
cube=PARAFAC.cube.design()
source('H:/Université/Github/CorrectionPARAFACinR/Functions/PARAFAC.cube.design.R')
setwd("..")
cube=PARAFAC.cube.design()
PlotAllEEM(cube,zlim=c(0,22))
ExportEEM(cube)
cube[[5]]
source('./PlotAllEEM.R')
getwd()
source('./Functions/myPalette.R')
source('./Functions/PlotAllEEM.R')
PlotAllEEM(cube,zlim=c(0,22))
cube[[1]]
ExCut = 0
EmCut = 0
EEMCut = 0
cube[[1]][-ExCut,-EmCut,-EEMCut]
ExCut = 1
write.table(cube[[1]][-ExCut,-EmCut,-EEMCut],"DataCube.txt")
cube[[1]][-ExCut,-EmCut,-EEMCut]
ExCut = 1
EmCut = 1
write.table(cube[[1]][-ExCut,-EmCut,-EEMCut],"DataCube.txt")
cube[[1]][-ExCut,-EmCut,-EEMCut]
ExCut = 1
EmCut = 0
EEMCut = 1
cube[[1]][-ExCut,-EmCut,-EEMCut]
EmCut = 1
cube[[1]][-ExCut,-EmCut,-EEMCut]
cube[[3]][ifelse(1,0,1)]
cube[[3]][ifelse(1,1,2)]
cube[[3]][ifelse(0,1,2)]
cube[[3]][-0]
cube[[3]][0]
?if
()
?if()
source('H:/Université/Github/CorrectionPARAFACinR/Functions/ExportEEM.R')
source('H:/Université/Github/CorrectionPARAFACinR/Functions/ExportEEM.R')
ExportEEM(cube)
cube[[1]][if(ExCut!=0){-ExCut},if(EmCut!=0){-EmCut},if(EEMCut!=0){-EEMCut}]
write.table(cube[[1]][if(ExCut!=0){-ExCut},if(EmCut!=0){-EmCut},if(EEMCut!=0){-EEMCut}],"DataCube.txt")
dim(cube[[1]][if(ExCut!=0){-ExCut},if(EmCut!=0){-EmCut},if(EEMCut!=0){-EEMCut}])
source('H:/Université/Github/CorrectionPARAFACinR/Functions/ExportEEM.R')
ExportEEM(cube)
ExportEEM(cube=cube)
ExportEEM(cube=cube)
ExCut = 0
EmCut = 0
EEMCut = 0
dim(cube[[1]][if(ExCut!=0){-ExCut},if(EmCut!=0){-EmCut},if(EEMCut!=0){-EEMCut}])
cube[[1]][,1,1]
ExCut = 1
cube2[[1]][,1,1] <- cube[[1]][-ExCut,,]
cube2=cube
cube2[[1]][,1,1] <- cube[[1]][-ExCut,,]
cube2[[1]] <- cube[[1]][-ExCut,,]
source('H:/Université/Github/CorrectionPARAFACinR/Functions/ExportEEM.R')
ExportEEM(cube)
ExCut = 2
EmCut = 2
EEMCut = 2
if(cut[1]>0)
{
ExCut = c(1,cut[1])
cube[[1]] <- cube[[1]][-ExCut,,]
cube[[3]] <- cube[[3]][-ExCut]
}
if(cut[2]>0)
{
EmCut = c(1:cut[2])
cube[[1]] <- cube[[1]][,-EmCut,]
cube[[4]] <- cube[[4]][-EmCut]
}
if(cut[3]>0)
{
EEMCut = c(1:cut[3])
cube[[1]] <- cube[[1]][,,-EEMCut]
}
cut = c(2,2,2)
ExCut = 0
EmCut = 0
EEMCut = 0
if(cut[1]>0)
{
ExCut = c(1,cut[1])
cube[[1]] <- cube[[1]][-ExCut,,]
cube[[3]] <- cube[[3]][-ExCut]
}
if(cut[2]>0)
{
EmCut = c(1:cut[2])
cube[[1]] <- cube[[1]][,-EmCut,]
cube[[4]] <- cube[[4]][-EmCut]
}
if(cut[3]>0)
{
EEMCut = c(1:cut[3])
cube[[1]] <- cube[[1]][,,-EEMCut]
}
dim(cube)
dim(cube[[1]])
dim(cube[[3]])
length(cube[[3]])
length(cube[[4]])
